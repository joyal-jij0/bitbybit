generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String      @id @default(uuid())
  email        String      @unique
  name         String
  createdAt    DateTime    @default(now())
  client       Client?
  freelancer   Freelancer?
  disputes     Dispute[]
  refreshToken String?     @unique
  accessToken  String?     @unique
}

model Client {
  id       String  @id @default(uuid())
  userId   String  @unique
  purpose  String?
  projects Job[]   @relation("ClientJobs")
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Freelancer {
  id             String           @id @default(uuid())
  userId         String           @unique
  skills         String[]
  portfolioUrl   String?
  jobs           Job[]            @relation("FreelancerJobs")
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  WorkSubmission WorkSubmission[]
}

model Job {
  id           String      @id @default(uuid())
  title        String
  description  String
  clientId     String
  freelancerId String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  milestones   Milestone[]
  client       Client      @relation("ClientJobs", fields: [clientId], references: [id])
  freelancer   Freelancer? @relation("FreelancerJobs", fields: [freelancerId], references: [id])
  Dispute      Dispute[]
  completedAt  DateTime?
  isRejected   Boolean     @default(false)
}

model Milestone {
  id              String           @id @default(uuid())
  title           String
  dueDate         DateTime
  jobId           String
  amount          Float
  status          MilestoneStatus  @default(PENDING)
  description     String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  job             Job              @relation(fields: [jobId], references: [id])
  workSubmissions WorkSubmission[]
  Dispute         Dispute[]
}

enum MilestoneStatus {
  PENDING
  IN_REVIEW
  APPROVED
  RELEASED
  DISPUTED
}

model WorkSubmission {
  id           String           @id @default(uuid())
  milestoneId  String
  freelancerId String
  status       SubmissionStatus @default(PENDING)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  files        Json?
  comments     String?
  milestone    Milestone        @relation(fields: [milestoneId], references: [id])
  freelancer   Freelancer       @relation(fields: [freelancerId], references: [id])
}

enum SubmissionStatus {
  PENDING
  REJECTED
  APPROVED
}

model Dispute {
  id          String        @id @default(uuid())
  jobId       String
  milestoneId String?
  raisedById  String
  status      DisputeStatus @default(OPEN)
  messages    Json?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  job         Job           @relation(fields: [jobId], references: [id])
  milestone   Milestone?    @relation(fields: [milestoneId], references: [id])
  raisedBy    User          @relation(fields: [raisedById], references: [id])
}

enum DisputeStatus {
  OPEN
  IN_REVIEW
  RESOLVED
}
